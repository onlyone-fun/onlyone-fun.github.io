import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-ApuChP6G.js";const l="/assets/images/JAVA/JVM/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%84%E6%88%90.png",e="/assets/images/JAVA/JVM/JDK%E7%89%88%E6%9C%AC%E4%B8%8D%E5%85%BC%E5%AE%B9%E6%8A%A5%E9%94%99.png",n="/assets/images/JAVA/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E6%B5%81%E7%A8%8B.png",h="/assets/images/JAVA/JVM/JDK8%E4%B9%8B%E5%89%8D%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png",p="/assets/images/JAVA/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png",r={},d=t('<h1 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm"><span>JVM</span></a></h1><h2 id="jvm概述-write-once-run-anywhere" tabindex="-1"><a class="header-anchor" href="#jvm概述-write-once-run-anywhere"><span>JVM概述（Write Once，Run Anywhere）</span></a></h2><blockquote><p>JVM全称 <code>Java Virtual Machine</code>,中文译名为Java虚拟机。JVM 本质上是一个运行在计算机上的程序，他的职责是运行Java字节码文件。</p><p><strong>Java代码执行流程：</strong></p><p>Java源文件 --&gt; Java编译器（javac命令）将源代码编译成java字节码文件 --&gt; 虚拟机运行并加载字节码文件并启动一个新的进程</p></blockquote><h3 id="功能" tabindex="-1"><a class="header-anchor" href="#功能"><span>功能</span></a></h3><ol><li><p>解释&amp;运行</p><p>将字节码文件中的字节码指令实时地解释成机器码</p></li><li><p>内存管理</p><p>自动为对象、方法等分配内存</p><p>自动的垃圾回收机制，回收不再使用的对象</p></li><li><p>即时编译</p><p>对热点代码进行优化，提升执行效率，即时编译是提升Java程序性能最核心的手段</p></li></ol><h3 id="常见jvm" tabindex="-1"><a class="header-anchor" href="#常见jvm"><span>常见JVM</span></a></h3><ul><li>最常见的是<code>HotSpot</code></li></ul><table><thead><tr><th>名称</th><th>作者</th><th>支持版本</th><th>社区活跃度（github star）</th><th>特性</th><th>适用场景</th></tr></thead><tbody><tr><td>HotSpot (Oracle JDK版)</td><td>Oracle</td><td>所有版本</td><td>高(闭源)</td><td>使用最广泛，稳定可靠，社区活跃JIT支持Oracle JDK默认虚拟机</td><td>默认</td></tr><tr><td>HotSpot (Open JDK版)</td><td>Oracle</td><td>所有版本</td><td>中(16.1k)</td><td>同上开源，Open JDK默认虚拟机</td><td>默认对JDK有二次开发需求</td></tr><tr><td>GraalVM</td><td>Oracle</td><td>11, 17,19企业版支持8</td><td>高（18.7k）</td><td>多语言支持高性能、JIT、AOT支持</td><td>微服务、云原生架构需要多语言混合编程</td></tr><tr><td>Dragonwell JDK龙井</td><td>Alibaba</td><td>标准版 8,11,17扩展版11,17</td><td>低(3.9k)</td><td>基于OpenJDK的增强高性能、bug修复、安全性提升JWarmup、ElasticHeap、Wisp特性支持</td><td>电商、物流、金融领域对性能要求比较高</td></tr><tr><td>Eclipse OpenJ9 (原 IBM J9)</td><td>IBM</td><td>8,11,17,19,20</td><td>低(3.1k)</td><td>高性能、可扩展JIT、AOT特性支持</td><td>微服务、云原生架构</td></tr></tbody></table><h2 id="字节码文件详解" tabindex="-1"><a class="header-anchor" href="#字节码文件详解"><span>字节码文件详解</span></a></h2><h3 id="虚拟机组成" tabindex="-1"><a class="header-anchor" href="#虚拟机组成"><span>虚拟机组成</span></a></h3><figure><img src="'+l+'" alt="虚拟机组成" tabindex="0" loading="lazy"><figcaption>虚拟机组成</figcaption></figure><ul><li>类加载子系统：核心组件类加载器，负责将字节码文件中的内容加载到内存中</li><li>运行时数据区：JVM管理的内存，创建出来的对象、类的信息等等内容都会放在该区域</li><li>执行引擎：包含了及时编译器、解释器、垃圾回收器，执行引擎使用解释器将字节码指令解释成机器码，使用及时编译器优化性能，使用垃圾回收器回收不再使用的对象</li><li>本地接口：调用本地使用C/C++编译好的方法，本地方法在java中声明时，都会带上<code>native</code>关键字</li></ul><h3 id="字节码文件组成" tabindex="-1"><a class="header-anchor" href="#字节码文件组成"><span>字节码文件组成</span></a></h3><blockquote><p>字节码文件为 二进制存储。可以使用 NotePad++使用 十六进制插件查看class文件</p><p>可以使用<code>jclasslib</code>工具查看字节码文件</p></blockquote><ul><li>基础信息：魔术、字节码文件对应的Java版本号、访问标识（public final等等）、父类和接口信息</li><li>常量池：保存了字符串常量、类或接口名、字段名，主要在字节码指令中使用</li><li>字段：当前类或接口声明的字段信息</li><li>方法：当前类或接口声明的方法信息，核心内容为方法的字节码指令</li><li>属性：类的属性，例如源码的文件名、内部类的列表等等</li></ul><h4 id="基本信息" tabindex="-1"><a class="header-anchor" href="#基本信息"><span>基本信息</span></a></h4><p>基本信息包含了 <code>jclasslib</code> 中能看到的两块内容</p><ul><li><p>Magic魔术</p><blockquote><p>每个Java字节码文件的前四个字节时固定的，用十六进制表示 --&gt;<code>0xcafebabe</code>。因为文件是无法通过文件扩展名来确定文件类型的，文件扩展名可以随意修改而不影响文件的内容。软件会使用文件的头几个字节（文件头）校验文件的类型，如果软件不支持该类型就会出错</p></blockquote></li><li><p>主副版本号</p><blockquote><p>主副版本号指的是编译字节码文件时使用的JDK版本号，主版本号用来标识大版本号，JDK1.0-1.1使用了45.0-45.3，JDK1.2是46之后每升级一个大版本就加一，副版本号是当主版本号相同时作为区分不同版本的标识</p><p><strong>1.2之后大版本计算方式</strong>： 主版本号 - 44 （52.0为JDK1.8）</p><p>ps：</p><p>当使用较低版本的JDK去运行较高版本JDK的字节码文件，无法使用会显示如下错误（一般建议降低依赖版本或更换依赖）：</p><figure><img src="'+e+`" alt="JDK版本不兼容报错" tabindex="0" loading="lazy"><figcaption>JDK版本不兼容报错</figcaption></figure></blockquote></li><li><p>其他基础信息</p><blockquote><p>包括访问标识（public、final、private、protected）、类（父类、本类）、接口索引</p></blockquote></li></ul><h4 id="常量池" tabindex="-1"><a class="header-anchor" href="#常量池"><span>常量池</span></a></h4><p>字节码文件中常量池的作用：避免相同的内容重复定义，节省空间。</p><blockquote><p>常量池中的数据都有一个编号，编号从1开始。在字段或者字节码指令中通过编号快速找到这个字符串。</p><p>字节码指令中通过编号引用到常量池的过程称之为<strong>符号引用</strong></p></blockquote><h4 id="字段" tabindex="-1"><a class="header-anchor" href="#字段"><span>字段</span></a></h4><p>字段中存放的是当前类或接口声明的字段信息。包含字段的名字、描述符（字段类型）、访问标识（publi\\private、final等）。</p><h4 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h4><p>字节码中的方法区是存放<strong>字节码指令</strong>的核心位置，字节码指令的内容存放在方法的Code属性中</p><h4 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h4><p>属性主要是指类属性，比如源码的文件名、内部类的列表等。</p><h3 id="字节码工具" tabindex="-1"><a class="header-anchor" href="#字节码工具"><span>字节码工具</span></a></h3><ol><li><p>javaP</p><p>JDK中自带的反编译工具，可以通过控制台查看字节码文件的内容，适合在服务器上查看字节码文件内容</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">javap</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 字节码文件名称</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # 如果为jar包，需要先使用 jar -xvf 命令解压</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>jclasslib</p><ul><li><p>jclasslib --&gt; IDEA插件 选择<code> view - Show Bytecode With Jclasslib</code></p></li><li><p>软件</p></li></ul></li><li><p>Arthas</p><p>文档网址：https://arthas.aliyun.com/doc/quick-start.html</p><blockquote><p>常用命令</p><ul><li><p>dump：可以将字节码文件保存到本地 <code>dump -d 输出目录 类的全限定名</code></p></li><li><p>jad：将类的字节码文件进行反编译成源代码，用于确认服务器上字节码文件是否最新 <code>jad --source-only 类的全限定名</code></p></li><li><p>classloader：查看类加载器的继承树</p></li><li><p>sc -d 类名 查看加载该类的详细信息</p></li><li><p>classloader -l 查看类加载器的详细信息</p></li><li><p>classloader -c 类加载器hash值 查看类加载器的详细路径</p></li></ul></blockquote></li></ol><h3 id="类的生命周期" tabindex="-1"><a class="header-anchor" href="#类的生命周期"><span>类的生命周期</span></a></h3><p>类的生命周期描述了一个类加载、使用、卸载的整个过程</p><ul><li>加载 --&gt; 连接（验证 、准备、解析）--&gt; 初始化 --&gt; 使用 --&gt; 卸载</li></ul><h4 id="加载阶段" tabindex="-1"><a class="header-anchor" href="#加载阶段"><span>加载阶段</span></a></h4><ol><li><p>类加载器根据类的全限定名通过不同的渠道以二进制的方式获取字节码信息，可以使用Java代码拓展不同的渠道</p><ul><li><p>本地磁盘上获取文件</p></li><li><p>运行时通过动态代理生成，比如Spring框架</p></li><li><p>Apple技术通过网络获取字节码文件</p></li></ul></li><li><p>类加载器在加载完类之后，Java虚拟机会将字节码中的信息保存到方法区中，方法区中生成一个<code>InstanceKlass</code>对象，保存类的所有信息，其中还包含实现特定功能比如多态的信息</p></li><li><p>虚拟机同时会在堆上生成与方法区中数据类似的<code>java.lang.Class</code>对象，作用是java代码中去获取类的信息以及存储静态字段的数据（JDK8之后）</p></li></ol><h4 id="连接阶段" tabindex="-1"><a class="header-anchor" href="#连接阶段"><span>连接阶段</span></a></h4><ul><li>验证，验证内容是否满足《Java虚拟机规范》</li><li>准备，给静态变量赋初值</li><li>解析，将常量池中的符号引用替换成指向内存的直接引用</li></ul><ol><li><p>验证</p><p>验证的主要目的是检测Java字节码文件是否遵守了《Java虚拟机规范》中的约束。这个阶段一般不需要程序员参与。主要包含如下四部分，具体详见《Java虚拟机规范》：</p><blockquote><ul><li>文件格式验证：必须以 <code>0xcafebabe</code>开头，主次版本号是否满足当前Java虚拟机版本要求</li><li>元信息验证，例如类必须有父类（super不能为空）</li><li>验证程序执行指令的语义，比如方法内的指令执行中跳转到不正确的位置</li><li>符号引用验证，例如是否访问了其他类中private的方法等</li></ul></blockquote></li></ol><p>⚡编译文件的主版本号不能高于运行环境主版本号，若主版本号相等，副版本号也不能超过。</p><p>JDK8中：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (major </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> JAVA_MIN_SUPPORTED_VERSION) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    (major </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> mac_version) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    ((major </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> max_version )</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">     (minor </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> JAVA_MAX_SUPPORTED_MINOR_VERSION)))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>准备</p><p>准备阶段为静态变量（static）、分配内存并设置初值，每一种基本数据类型和引用数据类型都有其初值</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>初始值</strong></th></tr></thead><tbody><tr><td><strong>int</strong></td><td><strong>0</strong></td></tr><tr><td><strong>long</strong></td><td><strong>0L</strong></td></tr><tr><td><strong>short</strong></td><td><strong>0</strong></td></tr><tr><td><strong>char</strong></td><td><strong>‘\\u0000’</strong></td></tr><tr><td><strong>byte</strong></td><td><strong>0</strong></td></tr><tr><td><strong>boolean</strong></td><td><strong>false</strong></td></tr><tr><td><strong>double</strong></td><td><strong>0.0</strong></td></tr><tr><td><strong>引用数据类型</strong></td><td><strong>null</strong></td></tr></tbody></table><blockquote><p>final 修饰的基本数据类型静态变量，准备阶段直接会将代码中的值进行赋值</p></blockquote></li><li><p>解析</p><p>解析阶段主要将常量池中的符号引用替换为<strong>直接引用</strong>，符号引用就是在字节码文件中使用编号来访问常量池中的内容，直接引用不使用编号，而是使用内存中地址进行访问具体数据</p></li></ol><h4 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h4><p>初始化阶段会执行字节码文件中 <code>clinit(class init 类的初始化)</code>方法的字节码指令，包含静态代码块中的代码，并为静态变量赋值</p><p>⚡类初始化触发时机</p><ol><li>访问一个类的静态变量或者静态方法，若变量是final修饰的并且等号右侧是常量不会触发初始化</li><li>调用 <code>Class.forName(String className)</code></li><li>new 一个该类的对象时</li><li>执行Main方法的当前类</li></ol><blockquote><p>添加 -XX:+TraceClassLoading 参数可以打印出加载并初始化类</p></blockquote><p>⚡静态代码块和代码块</p><ol><li>静态代码块会在类加载时机触发，且执行一次</li><li>代码块是在创建对象时执行，且在构造方法执行之前执行</li><li>静态代码块和静态变量，会按照他们的生声明顺序进行执行</li></ol><p>⚡<code>clinit函数</code>不会执行的情况</p><ol><li>无静态代码块且无静态变量赋值语句</li><li>有静态变量声明，但没有赋值语句</li><li>静态变量的定义使用final关键字，这类变量会在准备阶段直接进行初始化</li></ol><blockquote><ul><li>在继承中，通过子类访问父类静态变量，不会触发子类的初始化</li><li>对象数组的创建不会导致数组中元素的初始化</li><li>final修饰的变量若赋值的内容需要执行指令才能得出结果，会执行clinit方法进行初始化</li></ul></blockquote><h3 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器"><span>类加载器</span></a></h3><p>​ 类加载器（ClassLoader）是Java虚拟机提供给应用程序去实现获取类和接口字节码数据的技术，类加载器只参与加载过程中的字节码获取并加载到内存这一部分</p><figure><img src="`+n+'" alt="类加载器流程" tabindex="0" loading="lazy"><figcaption>类加载器流程</figcaption></figure><p>类加载器会通过二进制流的方式获取到字节码文件的内容，并将数据交给Java虚拟机，虚拟机会在方法区和堆区上生成对应的对象保存字节码信息</p><h4 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h4><ul><li>虚拟机底层实现：源代码位于Java虚拟机的源码中，实现语言与虚拟机底层语言一致，比如Hotstop使用C++，主要目的是保证Java程序运行中基础类被正确加载，确保其可靠性</li><li>JDK默认提供或自定义：JDK默认提供了多种处理不同渠道的类加载器，也可以自己根据需求定制，使用Java语言，所有Java中实现的类加载器都需要继承ClassLoader这个抽象类</li></ul><p>⚡JDK8之前的类加载器：</p><figure><img src="'+h+`" alt="JDK8之前类加载器" tabindex="0" loading="lazy"><figcaption>JDK8之前类加载器</figcaption></figure><blockquote><ul><li><code>BootStrapClassLoader</code>是启动类加载器，Arthas中<code>numberIfstance</code>为类加载器的数量，<code>loadedCountTotal</code>为加载类的数量</li><li><code>ExtClassLoader</code>是扩展类加载器</li><li><code>AppClassLoader</code>是应用程序类加载器</li></ul></blockquote><h4 id="启动类加载器" tabindex="-1"><a class="header-anchor" href="#启动类加载器"><span>启动类加载器</span></a></h4><ul><li><code>BootStrap ClassLoader</code>是由Hotspot虚拟机提供的、使用C++编写的类加载器</li><li>默认加载Java安装目录<code>/jre/lib</code>下的类文件，比如<code>rt.jar</code>、<code>tools.jar</code>、<code>resources.jar</code>等</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 启动程序类加载器案例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> BootstrapClassLoaderDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        ClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> classLoader</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(classLoader);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>加载String类的类加载器，打印结果为 null ,因为启动类加载器是 JDK8中由C++语言来编写的，在Java代码中去获取既不适合也不安全，从而使用null</p></blockquote><p><strong>扩展基础jar包</strong></p><p>当想扩展一些比较基础的jar包，让启动类加载器加载的方式：</p><ul><li>放入<code>jre/lib</code>下进行扩展，⚡尽可能的不要去修改JDK安装目录中的内容，会出现放进去由于文件名不匹配的问题，从而不能被正常加载 ---- 不推荐</li><li>使用参数进行扩展，使用<code>-Xbootclasspath/a:jar包目录/jar包名</code>进行扩展，参数中 /a 代表新增</li></ul><h4 id="扩展类加载器-应用程序类加载器" tabindex="-1"><a class="header-anchor" href="#扩展类加载器-应用程序类加载器"><span>扩展类加载器&amp;&amp;应用程序类加载器</span></a></h4><ul><li>扩展类加载器和应用程序类加载器都是JDK提供、使用Java编写的类加载器</li><li>源码位于 <code>sun.misc.Launcher</code>中，是一个静态内部类，继承自URLClassLoader，具备通过目录或指定jar包将字节码文件加载到内存中</li></ul><figure><img src="`+p+`" alt="类加载器继承关系" tabindex="0" loading="lazy"><figcaption>类加载器继承关系</figcaption></figure><ul><li>ClassLoader类定义了具体的行为模式，简单来说就是先从本地或者网络获得字节码信息，然后调用虚拟机底层的方法创建方法区和堆上的对象。这样的好处就是让子类只需要去实现如何获取字节码信息这部分代码。</li><li>SecureClassLoader提供了证书机制，提升了安全性。</li><li>URLClassLoader提供了根据URL获取目录下或者指定jar包进行加载，获取字节码的数据。</li><li>扩展类加载器和应用程序类加载器继承自<code>URLClassLoader</code>，获得了上述的三种能力。</li></ul><ol><li><p>扩展类加载器</p><p>扩展类加载器默认加载安装目录中<code>/jre/lib/ext</code>下的类文件</p><blockquote><p>ScriptEnvironment是nashorn框架中用来运行javascript语言代码的环境类，他位于nashorn.jar包中被扩展类加载器加载</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 扩展类加载器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ExtClassLoaderDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        ClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> classLoader</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ScriptEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(classLoader);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ol><p>通过扩展类加载器去加载额外jar包：</p><ul><li>放入<code>/jre/lib/ext</code>下进行扩展。⚡尽可能不要去更改JDK安装目录中的内容</li><li>使用参数进行扩展使用参数进行扩展。⚡使用<code>-Djava.ext.dirs=jar</code>包目录 进行扩展,这种方式会覆盖掉原始目录，可以用<code>;(windows):(macos/linux)</code>追加上原始目录</li></ul><blockquote><p>当目录中出现空格，需要将路径用引号包裹起来</p></blockquote><ol start="2"><li><p>应用程序类加载器</p><p>应用程序类加载器会加载<code>classpath</code>下的类文件，默认加载的是项目中类以及通过maven引入的第三方jar包中的类</p></li></ol>`,76),o=[d];function k(c,g){return a(),s("div",null,o)}const y=i(r,[["render",k],["__file","JVM.html.vue"]]),b=JSON.parse('{"path":"/note/java-note/JVM.html","title":"JVM","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-07-04T00:00:00.000Z","category":["Java"],"tag":["Java"],"description":"JVM JVM概述（Write Once，Run Anywhere） JVM全称 Java Virtual Machine,中文译名为Java虚拟机。JVM 本质上是一个运行在计算机上的程序，他的职责是运行Java字节码文件。 Java代码执行流程： Java源文件 --> Java编译器（javac命令）将源代码编译成java字节码文件 --> 虚拟...","head":[["meta",{"property":"og:url","content":"https://onlyone-fun/note/java-note/JVM.html"}],["meta",{"property":"og:site_name","content":"笔记、生活"}],["meta",{"property":"og:title","content":"JVM"}],["meta",{"property":"og:description","content":"JVM JVM概述（Write Once，Run Anywhere） JVM全称 Java Virtual Machine,中文译名为Java虚拟机。JVM 本质上是一个运行在计算机上的程序，他的职责是运行Java字节码文件。 Java代码执行流程： Java源文件 --> Java编译器（javac命令）将源代码编译成java字节码文件 --> 虚拟..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://onlyone-fun/assets/images/JAVA/JVM/虚拟机组成.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-08T07:44:56.000Z"}],["meta",{"property":"article:author","content":"savior"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-07-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-08T07:44:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM\\",\\"image\\":[\\"https://onlyone-fun/assets/images/JAVA/JVM/虚拟机组成.png\\",\\"https://onlyone-fun/assets/images/JAVA/JVM/JDK版本不兼容报错.png\\",\\"https://onlyone-fun/assets/images/JAVA/JVM/类加载器流程.png\\",\\"https://onlyone-fun/assets/images/JAVA/JVM/JDK8之前类加载器.png\\",\\"https://onlyone-fun/assets/images/JAVA/JVM/类加载器继承关系.png\\"],\\"datePublished\\":\\"2024-07-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-08T07:44:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"savior\\",\\"url\\":\\"https://onlyone-fun.github.io\\"}]}"]]},"headers":[{"level":2,"title":"JVM概述（Write Once，Run Anywhere）","slug":"jvm概述-write-once-run-anywhere","link":"#jvm概述-write-once-run-anywhere","children":[{"level":3,"title":"功能","slug":"功能","link":"#功能","children":[]},{"level":3,"title":"常见JVM","slug":"常见jvm","link":"#常见jvm","children":[]}]},{"level":2,"title":"字节码文件详解","slug":"字节码文件详解","link":"#字节码文件详解","children":[{"level":3,"title":"虚拟机组成","slug":"虚拟机组成","link":"#虚拟机组成","children":[]},{"level":3,"title":"字节码文件组成","slug":"字节码文件组成","link":"#字节码文件组成","children":[]},{"level":3,"title":"字节码工具","slug":"字节码工具","link":"#字节码工具","children":[]},{"level":3,"title":"类的生命周期","slug":"类的生命周期","link":"#类的生命周期","children":[]},{"level":3,"title":"类加载器","slug":"类加载器","link":"#类加载器","children":[]}]}],"git":{"createdTime":1720424696000,"updatedTime":1720424696000,"contributors":[{"name":"savior","email":"1460361323@qq.com","commits":1}]},"readingTime":{"minutes":12.65,"words":3796},"filePathRelative":"note/java-note/JVM.md","localizedDate":"2024年7月4日","excerpt":"\\n<h2>JVM概述（Write Once，Run Anywhere）</h2>\\n<blockquote>\\n<p>JVM全称 <code>Java Virtual Machine</code>,中文译名为Java虚拟机。JVM 本质上是一个运行在计算机上的程序，他的职责是运行Java字节码文件。</p>\\n<p><strong>Java代码执行流程：</strong></p>\\n<p>Java源文件 --&gt; Java编译器（javac命令）将源代码编译成java字节码文件 --&gt; 虚拟机运行并加载字节码文件并启动一个新的进程</p>\\n</blockquote>\\n<h3>功能</h3>\\n","autoDesc":true}');export{y as comp,b as data};
